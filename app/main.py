
import asyncio
import os
import uuid
from pathlib import Path
from typing import Optional

from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import PlainTextResponse

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import (
    Message,
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from aiogram.client.default import DefaultBotProperties

# ---------- Config ----------

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN env var is required")

WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "secret")
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "/")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

app = FastAPI()

# ---------- Helpers ----------

TMP_DIR = Path("/tmp/massive_helper")
TMP_DIR.mkdir(parents=True, exist_ok=True)

AUDIO_MAX_MB = int(os.getenv("AUDIO_MAX_MB", "20"))  # –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é


def kb_main() -> ReplyKeyboardMarkup:
    # –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–æ–¥–ø–∏—Å–∏, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–µ–∑–∞–ª–∏—Å—å
    return ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [
                KeyboardButton(text="üé•‚Üíüé§ –í–∏–¥–µ–æ/–ö—Ä—É–∂–æ–∫ ‚Üí –ì–æ–ª–æ—Å"),
            ],
            [
                KeyboardButton(text="üîµ‚Üíüìπ –ö—Ä—É–∂–æ–∫ ‚Üí –í–∏–¥–µ–æ"),
                KeyboardButton(text="üéôÔ∏è‚Üíüéµ –ì–æ–ª–æ—Å ‚Üí MP3"),
            ],
            [
                KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å"),
            ],
        ],
    )


async def run_ffmpeg(args: list[str]) -> tuple[int, str, str]:
    proc = await asyncio.create_subprocess_exec(
        "ffmpeg", *args,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE,
    )
    out, err = await proc.communicate()
    return proc.returncode, out.decode(), err.decode()


async def tg_download_file_by_id(message: Message, file_id: str, suffix: str) -> Path:
    """
    –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ aiogram v3:
    1) file = await bot.get_file(file_id)
    2) await bot.download(file, destination=path)
    """
    in_path = TMP_DIR / f"in_{uuid.uuid4().hex}{suffix}"
    try:
        file = await bot.get_file(file_id)
        await bot.download(file, destination=in_path)
        return in_path
    except TelegramBadRequest as e:
        # –ù–∞–ø—Ä–∏–º–µ—Ä: "file is too big"
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –∏–∑ Telegram.\n"
            f"<code>{e.message}</code>\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (–æ–±—ã—á–Ω–æ –¥–æ ~{AUDIO_MAX_MB}‚ÄØ–ú–ë) "
            "–∏–ª–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–∂–∞—Ç—å –µ–≥–æ.",
            reply_markup=kb_main(),
        )
        raise
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: <code>{e}</code>", reply_markup=kb_main())
        raise


async def convert_to_voice_ogg(in_path: Path) -> Path:
    out_path = TMP_DIR / f"out_{uuid.uuid4().hex}.ogg"
    # opus voice-compatible ogg
    args = [
        "-y",
        "-i", str(in_path),
        "-ac", "1",
        "-ar", "48000",
        "-c:a", "libopus",
        "-b:a", "64k",
        str(out_path),
    ]
    code, _, err = await run_ffmpeg(args)
    if code != 0:
        raise RuntimeError(f"ffmpeg error: {err}")
    return out_path


async def convert_circlenote_to_mp4(in_path: Path) -> Path:
    out_path = TMP_DIR / f"out_{uuid.uuid4().hex}.mp4"
    args = [
        "-y",
        "-i", str(in_path),
        "-c:v", "libx264",
        "-preset", "veryfast",
        "-crf", "23",
        "-c:a", "aac",
        "-b:a", "128k",
        str(out_path),
    ]
    code, _, err = await run_ffmpeg(args)
    if code != 0:
        raise RuntimeError(f"ffmpeg error: {err}")
    return out_path


async def convert_voice_to_mp3(in_path: Path) -> Path:
    out_path = TMP_DIR / f"out_{uuid.uuid4().hex}.mp3"
    args = [
        "-y",
        "-i", str(in_path),
        "-vn",
        "-c:a", "libmp3lame",
        "-b:a", "192k",
        str(out_path),
    ]
    code, _, err = await run_ffmpeg(args)
    if code != 0:
        raise RuntimeError(f"ffmpeg error: {err}")
    return out_path


# ---------- Handlers ----------

@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É –Ω–∏–∂–µ üëá",
        reply_markup=kb_main(),
    )


@dp.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def help_cmd(message: Message):
    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:\n"
        "‚Ä¢ üé•‚Üíüé§ –í–∏–¥–µ–æ/–ö—Ä—É–∂–æ–∫ ‚Üí –ì–æ–ª–æ—Å ‚Äî –ø—Ä–∏—à–ª–∏—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ –∫—Ä—É–∂–æ–∫, –≤–µ—Ä–Ω—É –≥–æ–ª–æ—Å–æ–≤–æ–µ (OGG/Opus).\n"
        "‚Ä¢ üîµ‚Üíüìπ –ö—Ä—É–∂–æ–∫ ‚Üí –í–∏–¥–µ–æ ‚Äî –ø—Ä–∏—à–ª–∏—Ç–µ –∫—Ä—É–∂–æ–∫, –≤–µ—Ä–Ω—É –æ–±—ã—á–Ω–æ–µ MP4.\n"
        "‚Ä¢ üéôÔ∏è‚Üíüéµ –ì–æ–ª–æ—Å ‚Üí MP3 ‚Äî –ø—Ä–∏—à–ª–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ, –≤–µ—Ä–Ω—É MP3.\n",
        reply_markup=kb_main(),
    )


# –í–∏–¥–µ–æ –∏–ª–∏ –∫—Ä—É–∂–æ–∫ -> –≥–æ–ª–æ—Å (OGG)
@dp.message(F.video | F.video_note)
async def handle_video_or_circlenote(message: Message):
    text = message.text or ""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É/–∫–Ω–æ–ø–∫–µ ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≥–æ–ª–æ—Å
    # –∏–Ω–∞—á–µ, –µ—Å–ª–∏ —ç—Ç–æ –∫—Ä—É–∂–æ–∫, –ø–æ–∫–∞–∂–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø—Ä–æ –∫–æ–Ω–≤–µ—Ä—Å–∏—é –≤ mp4
    if text == "üé•‚Üíüé§ –í–∏–¥–µ–æ/–ö—Ä—É–∂–æ–∫ ‚Üí –ì–æ–ª–æ—Å":
        pass  # —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º —Ä–µ–∂–∏–º–µ
    # –°–∫–∞—á–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–∏–∫
    if message.video:
        file_id = message.video.file_id
        in_path = await tg_download_file_by_id(message, file_id, ".mp4")
    else:
        # video_note (–∫—Ä—É–∂–æ–∫)
        file_id = message.video_note.file_id
        in_path = await tg_download_file_by_id(message, file_id, ".mp4")

    await message.answer("‚è≥ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ –≥–æ–ª–æ—Å–æ–≤–æ–µ...")
    try:
        out_path = await convert_to_voice_ogg(in_path)
        await message.answer_voice(voice=out_path.open("rb"))
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: <code>{e}</code>")
    finally:
        try:
            in_path.unlink(missing_ok=True)
        except Exception:
            pass


# –ö—Ä—É–∂–æ–∫ -> –≤–∏–¥–µ–æ MP4 (–ø–æ –∫–Ω–æ–ø–∫–µ)
@dp.message(F.text == "üîµ‚Üíüìπ –ö—Ä—É–∂–æ–∫ ‚Üí –í–∏–¥–µ–æ")
async def prompt_circle_to_video(message: Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—Ä—É–∂–æ–∫ (–≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ), —è –≤–µ—Ä–Ω—É –æ–±—ã—á–Ω–æ–µ MP4.", reply_markup=kb_main())


@dp.message(F.video_note & ~F.text)
async def circle_to_video_convert(message: Message):
    file_id = message.video_note.file_id
    in_path = await tg_download_file_by_id(message, file_id, ".mp4")
    await message.answer("‚è≥ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –∫—Ä—É–∂–æ–∫ –≤ MP4...")
    try:
        out_path = await convert_circlenote_to_mp4(in_path)
        await message.answer_document(document=out_path.open("rb"), caption="–ì–æ—Ç–æ–≤–æ ‚úÖ")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: <code>{e}</code>", reply_markup=kb_main())
    finally:
        try:
            in_path.unlink(missing_ok=True)
        except Exception:
            pass


# –ì–æ–ª–æ—Å -> MP3
@dp.message(F.text == "üéôÔ∏è‚Üíüéµ –ì–æ–ª–æ—Å ‚Üí MP3")
async def prompt_voice_to_mp3(message: Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —è –≤–µ—Ä–Ω—É MP3-—Ñ–∞–π–ª.", reply_markup=kb_main())


@dp.message(F.voice & ~F.text)
async def voice_to_mp3(message: Message):
    file_id = message.voice.file_id
    in_path = await tg_download_file_by_id(message, file_id, ".ogg")
    await message.answer("‚è≥ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ MP3...")
    try:
        out_path = await convert_voice_to_mp3(in_path)
        await message.answer_document(document=out_path.open("rb"), caption="–ì–æ—Ç–æ–≤–æ ‚úÖ")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: <code>{e}</code>", reply_markup=kb_main())
    finally:
        try:
            in_path.unlink(missing_ok=True)
        except Exception:
            pass


# Fallback –¥–ª—è –Ω–µ–ø–æ–π–º–∞–Ω–Ω—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤ ‚Äî —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –≤ –ª–æ–≥–∞—Ö, –Ω–æ –±–µ–∑ 500
@dp.message()
async def fallback(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ üëá", reply_markup=kb_main())


# ---------- FastAPI ----------

@app.get("/", response_class=PlainTextResponse)
async def root_get():
    # —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ 405 Method Not Allowed –≤ –ª–æ–≥–∞—Ö –æ—Ç health-check
    return "OK"


@app.post(WEBHOOK_PATH)
async def webhook(request: Request):
    # –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–∞ –æ—Ç Telegram
    secret = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
    if secret != WEBHOOK_SECRET:
        raise HTTPException(status_code=403, detail="bad secret")

    data = await request.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}
