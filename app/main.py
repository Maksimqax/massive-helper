
import os
import asyncio
import aiohttp
import tempfile
import subprocess
from pathlib import Path

from fastapi import FastAPI, Request, Header, HTTPException
from fastapi.responses import PlainTextResponse, JSONResponse

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Update, Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.enums import ParseMode

# ---------- env ----------
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "").rstrip("/")
SECRET_TOKEN = os.getenv("SECRET_TOKEN", "").strip() or None
MAX_FILE_MB = int(os.getenv("MAX_FILE_MB", "18"))  # Telegram free limit ~20MB, –æ—Å—Ç–∞–≤–∏–º –∑–∞–ø–∞—Å
PORT = int(os.getenv("PORT", "10000"))

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

app = FastAPI()

# ---------- helpers ----------
def kb_main() -> ReplyKeyboardMarkup:
    # –ö–æ—Ä–æ—Ç–∫–∏–µ –Ω–µ—á–µ–∫—Ä—ã–∂–∏–º—ã–µ –ª–µ–π–±–ª—ã —Å emoji
    rows = [
        [
            KeyboardButton(text="üéô –ì–æ–ª–æ—Å ‚Üí MP3"),
            KeyboardButton(text="üéß –ê—É–¥–∏–æ ‚Üí –ì–æ–ª–æ—Å"),
        ],
        [
            KeyboardButton(text="üé• –í–∏–¥–µ–æ/–ö—Ä—É–∂–æ–∫ ‚Üí –ì–æ–ª–æ—Å"),
            KeyboardButton(text="üéµ –ò–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ"),
        ],
        [
            KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ / –û—Ç–º–µ–Ω–∞"),
        ],
    ]
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)

async def ffmpeg_available() -> bool:
    try:
        proc = await asyncio.create_subprocess_exec("ffmpeg", "-version",
                                                    stdout=asyncio.subprocess.DEVNULL,
                                                    stderr=asyncio.subprocess.DEVNULL)
        await proc.wait()
        return proc.returncode == 0
    except Exception:
        return False

async def tg_download_to_temp(file_id: str, suffix: str) -> Path:
    f = await bot.get_file(file_id)
    if f.file_size and f.file_size > MAX_FILE_MB * 1024 * 1024:
        raise HTTPException(413, f"–§–∞–π–ª –±–æ–ª—å—à–µ {MAX_FILE_MB} –ú–ë")

    file_path = f.file_path  # e.g. "videos/file_12345.mp4"
    url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_path}"

    tmp = tempfile.NamedTemporaryFile(delete=False, suffix=suffix)
    tmp_path = Path(tmp.name)
    tmp.close()

    timeout = aiohttp.ClientTimeout(total=60*10)
    async with aiohttp.ClientSession(timeout=timeout) as session:
        async with session.get(url) as resp:
            if resp.status != 200:
                raise HTTPException(502, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª: HTTP {resp.status}")
            with tmp_path.open("wb") as out:
                async for chunk in resp.content.iter_chunked(1024 * 128):
                    out.write(chunk)
    return tmp_path

async def run_ffmpeg(args: list[str]) -> None:
    proc = await asyncio.create_subprocess_exec(
        "ffmpeg", *args,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE,
    )
    stdout, stderr = await proc.communicate()
    if proc.returncode != 0:
        raise RuntimeError(f"ffmpeg failed: {stderr.decode(errors='ignore')[:4000]}")

# ---------- Handlers ----------

@dp.message(Command("start"))
async def cmd_start(message: Message):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –º–µ–¥–∏–∞:\n\n"
        "üéô <b>–ì–æ–ª–æ—Å ‚Üí MP3</b>\n"
        "üéß <b>–ê—É–¥–∏–æ ‚Üí –ì–æ–ª–æ—Å (OGG)</b>\n"
        "üé• <b>–í–∏–¥–µ–æ/–ö—Ä—É–∂–æ–∫ ‚Üí –ì–æ–ª–æ—Å</b>\n"
        "üéµ <b>–ò–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ</b>\n\n"
        f"–ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: <b>{MAX_FILE_MB} –ú–ë</b>."
    )
    await message.answer(text, reply_markup=kb_main())

# --- Voice -> MP3
@dp.message(F.voice)
async def handle_voice_to_mp3(message: Message):
    v = message.voice
    try:
        src = await tg_download_to_temp(v.file_id, ".ogg")
    except HTTPException as e:
        await message.answer(str(e.detail))
        return

    if not await ffmpeg_available():
        await message.answer("ffmpeg –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–µ –º–æ–≥—É —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å üòî")
        src.unlink(missing_ok=True)
        return

    out_path = Path(tempfile.mkstemp(suffix=".mp3")[1])
    try:
        await run_ffmpeg(["-y", "-i", str(src), "-acodec", "libmp3lame", "-b:a", "128k", str(out_path)])
        await message.answer_document(document=out_path.open("rb"), caption="–ì–æ—Ç–æ–≤–æ: MP3 ‚úÖ")
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å: {e}")
    finally:
        src.unlink(missing_ok=True)
        out_path.unlink(missing_ok=True)

# --- Audio file -> Voice (ogg opus)
@dp.message(F.audio | (F.document & F.document.mime_type.startswith("audio/")))
async def handle_audio_to_voice(message: Message):
    a = message.audio or message.document
    try:
        src = await tg_download_to_temp(a.file_id, ".audio")
    except HTTPException as e:
        await message.answer(str(e.detail)); return

    if not await ffmpeg_available():
        await message.answer("ffmpeg –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–µ –º–æ–≥—É —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å üòî")
        src.unlink(missing_ok=True); return

    out_path = Path(tempfile.mkstemp(suffix=".ogg")[1])
    try:
        await run_ffmpeg(["-y", "-i", str(src), "-c:a", "libopus", "-b:a", "64k", "-vn", str(out_path)])
        await message.answer_voice(voice=out_path.open("rb"), caption="–ì–æ—Ç–æ–≤–æ: –≥–æ–ª–æ—Å–æ–≤–æ–µ ‚úÖ")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
    finally:
        src.unlink(missing_ok=True)
        out_path.unlink(missing_ok=True)

# --- Video / VideoNote -> Voice
@dp.message(F.video | F.video_note)
async def handle_video_or_circle_to_voice(message: Message):
    obj = message.video or message.video_note
    try:
        # –í—ã—Ç—è–≥–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª, —á—Ç–æ–±—ã –Ω–µ —É–ø–∏—Ä–∞—Ç—å—Å—è –≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ .download()
        src = await tg_download_to_temp(obj.file_id, ".mp4")
    except HTTPException as e:
        await message.answer(str(e.detail)); return

    if not await ffmpeg_available():
        await message.answer("ffmpeg –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–µ –º–æ–≥—É –∏–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ üòî")
        src.unlink(missing_ok=True); return

    out_path = Path(tempfile.mkstemp(suffix='.ogg')[1])
    try:
        # –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ ogg/opus –¥–ª—è voice
        await run_ffmpeg(["-y", "-i", str(src), "-vn", "-c:a", "libopus", "-b:a", "64k", str(out_path)])
        await message.answer_voice(voice=out_path.open("rb"), caption="–ì–æ—Ç–æ–≤–æ: –≥–æ–ª–æ—Å –∏–∑ –≤–∏–¥–µ–æ ‚úÖ")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
    finally:
        src.unlink(missing_ok=True)
        out_path.unlink(missing_ok=True)

# --- Extract audio from video, return as MP3
@dp.message(F.text.in_({"üéµ –ò–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ"}))
async def ask_video_for_audio(message: Message):
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∏–¥–µ–æ, —è –∏–∑–≤–ª–µ–∫—É –∏–∑ –Ω–µ–≥–æ –∞—É–¥–∏–æ (MP3).")

@dp.message(F.video)
async def handle_video_to_mp3(message: Message):
    # –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —É–∂–µ –µ—Å—Ç—å –≤—ã—à–µ –¥–ª—è –≤–∏–¥–µ–æ -> –≥–æ–ª–æ—Å.
    # –ß—Ç–æ–±—ã —Ä–∞–∑–ª–∏—á–∏—Ç—å —Ä–µ–∂–∏–º—ã, –º–æ–∂–Ω–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ FSM.
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤—Å–µ–≥–¥–∞ –¥–µ–ª–∞–µ–º –∏ voice, –∏ mp3 –ø–æ –∑–∞–ø—Ä–æ—Å–Ω–æ–π –∫–Ω–æ–ø–∫–µ.
    pass

# –ö–Ω–æ–ø–∫–∏-—Ç–µ–∫—Å—Ç—ã
@dp.message(F.text.in_({"üéô –ì–æ–ª–æ—Å ‚Üí MP3"}))
async def info_v2m(message: Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —è –≤–µ—Ä–Ω—É MP3.", reply_markup=kb_main())

@dp.message(F.text.in_({"üéß –ê—É–¥–∏–æ ‚Üí –ì–æ–ª–æ—Å"}))
async def info_a2v(message: Message):
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –∞—É–¥–∏–æ-—Ñ–∞–π–ª ‚Äî —è –≤–µ—Ä–Ω—É –≥–æ–ª–æ—Å–æ–≤–æ–µ (OGG).", reply_markup=kb_main())

@dp.message(F.text.in_({"üé• –í–∏–¥–µ–æ/–ö—Ä—É–∂–æ–∫ ‚Üí –ì–æ–ª–æ—Å"}))
async def info_video2voice(message: Message):
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ –∫—Ä—É–∂–æ–∫ ‚Äî —è –ø—Ä–∏—à–ª—é –≥–æ–ª–æ—Å–æ–≤–æ–µ (–∏–∑–≤–ª–µ–∫—É –∞—É–¥–∏–æ).", reply_markup=kb_main())

@dp.message(F.text.in_({"‚Ü©Ô∏è –ù–∞–∑–∞–¥ / –û—Ç–º–µ–Ω–∞"}))
async def cancel(message: Message):
    await message.answer("–û–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.", reply_markup=kb_main())

# Fallback
@dp.message()
async def fallback(message: Message):
    await message.answer("–ù–µ –ø–æ–Ω—è–ª. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ üôè", reply_markup=kb_main())

# ---------- Webhook / FastAPI ----------

@app.get("/", response_class=PlainTextResponse)
async def root():
    return "OK"

@app.head("/", response_class=PlainTextResponse)
async def root_head():
    return ""

@app.get("/healthz", response_class=PlainTextResponse)
async def health():
    return "ok"

@app.post("/")
async def webhook(request: Request, x_telegram_bot_api_secret_token: str | None = Header(default=None)):
    # 403, –µ—Å–ª–∏ —Å–µ–∫—Ä–µ—Ç –≤–∫–ª—é—á–µ–Ω –∏ –Ω–µ —Å–æ–≤–ø–∞–ª
    if SECRET_TOKEN and x_telegram_bot_api_secret_token != SECRET_TOKEN:
        raise HTTPException(status_code=403, detail="Forbidden (bad secret)")

    data = await request.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return JSONResponse({"ok": True})

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Ä—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞/—É–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ (–µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ –Ω–µ —á–µ—Ä–µ–∑ Render)
@app.get("/set-webhook")
async def set_webhook():
    url = WEBHOOK_URL or ""
    if not url:
        raise HTTPException(400, "WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω")
    res = await bot.set_webhook(url, secret_token=SECRET_TOKEN) if SECRET_TOKEN else await bot.set_webhook(url)
    return {"ok": res}

@app.get("/delete-webhook")
async def delete_webhook():
    res = await bot.delete_webhook(drop_pending_updates=False)
    return {"ok": res}

# Uvicorn –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ start.sh
