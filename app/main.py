import os
import asyncio
import tempfile
from pathlib import Path

from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Update
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("BOT_TOKEN env var is not set")

bot = Bot(TOKEN)
dp = Dispatcher(storage=MemoryStorage())
app = FastAPI()

# ---------- Healthcheck ----------
@app.get("/ping")
async def ping():
    return {"status": "ok"}

# ---------- Helper: run ffmpeg ----------
async def run_ffmpeg(cmd: list):
    proc = await asyncio.create_subprocess_exec(
        *cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
    )
    _stdout, stderr = await proc.communicate()
    if proc.returncode != 0:
        err = stderr.decode("utf-8", errors="ignore")[:4000]
        raise RuntimeError(f"ffmpeg error: {err}")

# ---------- FSM States ----------
class Flow(StatesGroup):
    audio_from_video = State()
    audio_from_circle = State()
    audio_from_voice = State()
    audio_to_voice = State()
    video_to_voice = State()
    video_to_circle = State()
    circle_to_video = State()

# ---------- Keyboards ----------
def main_menu():
    kb = InlineKeyboardBuilder()
    kb.button(text="–ê—É–¥–∏–æ üîä", callback_data="menu_audio")
    kb.button(text="–í–∏–¥–µ–æ / –ö—Ä—É–∂–æ–∫ üé¶", callback_data="menu_video")
    kb.adjust(2)
    return kb.as_markup()

def audio_menu():
    kb = InlineKeyboardBuilder()
    kb.button(text="–í–∏–¥–µ–æ ‚Üí –∞—É–¥–∏–æ", callback_data="audio_from_video")
    kb.button(text="–ö—Ä—É–∂–æ–∫ ‚Üí –∞—É–¥–∏–æ", callback_data="audio_from_circle")
    kb.button(text="–ì–æ–ª–æ—Å–æ–≤. ‚Üí –∞—É–¥–∏–æ", callback_data="audio_from_voice")
    kb.button(text="–ê—É–¥–∏–æ ‚Üí –≥–æ–ª–æ—Å.", callback_data="audio_to_voice")
    kb.button(text="–í–∏–¥/–ö—Ä—É–∂ ‚Üí –≥–æ–ª–æ—Å.", callback_data="video_to_voice")
    kb.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_main")
    kb.adjust(2, 2, 2)
    return kb.as_markup()

def video_menu():
    kb = InlineKeyboardBuilder()
    kb.button(text="–í–∏–¥–µ–æ ‚Üí –∫—Ä—É–∂–æ–∫", callback_data="video_to_circle")
    kb.button(text="–ö—Ä—É–∂–æ–∫ ‚Üí –≤–∏–¥–µ–æ", callback_data="circle_to_video")
    kb.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_main")
    kb.adjust(2, 1)
    return kb.as_markup()

# ---------- Entrypoints ----------
@dp.message(Command("start"))
async def start_cmd(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=main_menu())

@dp.callback_query()
async def callbacks(cb: types.CallbackQuery, state: FSMContext):
    if cb.data == "menu_audio":
        await state.clear()
        await cb.message.edit_text(
            "üîä **–ê—É–¥–∏–æ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:**\n"
            "‚Ä¢ –í–∏–¥–µ–æ ‚Üí –∞—É–¥–∏–æ (–∏–∑–≤–ª–µ—á—å –∑–≤—É–∫)\n"
            "‚Ä¢ –ö—Ä—É–∂–æ–∫ ‚Üí –∞—É–¥–∏–æ (–∑–≤—É–∫ –∏–∑ video note)\n"
            "‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–æ–µ ‚Üí –∞—É–¥–∏–æ (mp3)\n"
            "‚Ä¢ –ê—É–¥–∏–æ ‚Üí –≥–æ–ª–æ—Å–æ–≤–æ–µ (voice)\n"
            "‚Ä¢ –í–∏–¥–µ–æ/–∫—Ä—É–∂–æ–∫ ‚Üí –≥–æ–ª–æ—Å–æ–≤–æ–µ (voice)",
            reply_markup=audio_menu(),
            parse_mode="Markdown"
        )
    elif cb.data == "menu_video":
        await state.clear()
        await cb.message.edit_text(
            "üé¶ **–í–∏–¥–µ–æ / –ö—Ä—É–∂–æ–∫ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:**\n"
            "‚Ä¢ –í–∏–¥–µ–æ ‚Üí –∫—Ä—É–∂–æ–∫ (video note)\n"
            "‚Ä¢ –ö—Ä—É–∂–æ–∫ ‚Üí –≤–∏–¥–µ–æ (mp4)",
            reply_markup=video_menu(),
            parse_mode="Markdown"
        )
    elif cb.data == "back_main":
        await state.clear()
        await cb.message.edit_text("‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

    # Set states and prompt
    elif cb.data == "audio_from_video":
        await state.set_state(Flow.audio_from_video)
        await cb.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ **–≤–∏–¥–µ–æ** (mp4/mov ‚â§ ~50 –ú–ë). –Ø –∏–∑–≤–ª–µ–∫—É –∏–∑ –Ω–µ–≥–æ –∑–≤—É–∫ –∏ –ø—Ä–∏—à–ª—é —Ñ–∞–π–ª.", parse_mode="Markdown")
    elif cb.data == "audio_from_circle":
        await state.set_state(Flow.audio_from_circle)
        await cb.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ **–∫—Ä—É–∂–æ–∫** (video note). –Ø –∏–∑–≤–ª–µ–∫—É –∏–∑ –Ω–µ–≥–æ –∑–≤—É–∫ –∏ –ø—Ä–∏—à–ª—é —Ñ–∞–π–ª.", parse_mode="Markdown")
    elif cb.data == "audio_from_voice":
        await state.set_state(Flow.audio_from_voice)
        await cb.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ **–≥–æ–ª–æ—Å–æ–≤–æ–µ**. –Ø –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –µ–≥–æ –≤ –æ–±—ã—á–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª (mp3).", parse_mode="Markdown")
    elif cb.data == "audio_to_voice":
        await state.set_state(Flow.audio_to_voice)
        await cb.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ **–∞—É–¥–∏–æ—Ñ–∞–π–ª** (mp3/m4a/ogg). –Ø –ø—Ä–µ–≤—Ä–∞—â—É –µ–≥–æ –≤ *voice*.", parse_mode="Markdown")
    elif cb.data == "video_to_voice":
        await state.set_state(Flow.video_to_voice)
        await cb.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ **–≤–∏–¥–µ–æ –∏–ª–∏ –∫—Ä—É–∂–æ–∫**. –Ø –∏–∑–≤–ª–µ–∫—É –∑–≤—É–∫ –∏ –ø—Ä–∏—à–ª—é *voice*.", parse_mode="Markdown")
    elif cb.data == "video_to_circle":
        await state.set_state(Flow.video_to_circle)
        await cb.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ **–≤–∏–¥–µ–æ** (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ ‚â§ 60—Å). –°–¥–µ–ª–∞—é –∏–∑ –Ω–µ–≥–æ *–∫—Ä—É–∂–æ–∫* (video note).", parse_mode="Markdown")
    elif cb.data == "circle_to_video":
        await state.set_state(Flow.circle_to_video)
        await cb.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ **–∫—Ä—É–∂–æ–∫**. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –µ–≥–æ –≤ –æ–±—ã—á–Ω–æ–µ **–≤–∏–¥–µ–æ** (mp4).", parse_mode="Markdown")

# ---------- Handlers Implementation ----------

# 1) –í–∏–¥–µ–æ ‚Üí –∞—É–¥–∏–æ (OGG/Opus)
@dp.message(Flow.audio_from_video)
async def handle_video_to_audio(message: types.Message, state: FSMContext):
    video = message.video or message.document if (message.document and message.document.mime_type and message.document.mime_type.startswith("video/")) else None
    if not video:
        await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ **–≤–∏–¥–µ–æ—Ñ–∞–π–ª** (mp4/mov).", parse_mode="Markdown")
        return

    await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ...")
    with tempfile.TemporaryDirectory() as tmp:
        in_path = Path(tmp) / "input.mp4"
        out_path = Path(tmp) / "audio.ogg"
        await (video if isinstance(video, types.Video) else message.document).download(destination=in_path)

        cmd = ["ffmpeg", "-i", str(in_path), "-vn", "-acodec", "libopus", "-ar", "48000", "-ac", "1", "-b:a", "64k", str(out_path), "-y"]
        try:
            await run_ffmpeg(cmd)
            await message.answer_document(types.FSInputFile(str(out_path)), caption="–ì–æ—Ç–æ–≤–æ: –∏–∑–≤–ª–µ—á—ë–Ω–Ω–æ–µ –∞—É–¥–∏–æ (OGG/Opus).")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    await state.clear()
    await message.answer("–ï—â—ë —á—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=main_menu())

# 2) –ö—Ä—É–∂–æ–∫ ‚Üí –∞—É–¥–∏–æ (OGG/Opus)
@dp.message(Flow.audio_from_circle)
async def handle_circle_to_audio(message: types.Message, state: FSMContext):
    if not message.video_note:
        await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ **–∫—Ä—É–∂–æ–∫** (video note).", parse_mode="Markdown")
        return
    await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫—Ä—É–∂–æ–∫...")
    with tempfile.TemporaryDirectory() as tmp:
        in_path = Path(tmp) / "circle.mp4"
        out_path = Path(tmp) / "audio.ogg"
        await message.video_note.download(destination=in_path)
        cmd = ["ffmpeg", "-i", str(in_path), "-vn", "-acodec", "libopus", "-ar", "48000", "-ac", "1", "-b:a", "64k", str(out_path), "-y"]
        try:
            await run_ffmpeg(cmd)
            await message.answer_document(types.FSInputFile(str(out_path)), caption="–ì–æ—Ç–æ–≤–æ: –∑–≤—É–∫ –∏–∑ –∫—Ä—É–∂–∫–∞ (OGG/Opus).")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")
    await state.clear()
    await message.answer("–ï—â—ë —á—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=main_menu())

# 3) –ì–æ–ª–æ—Å–æ–≤–æ–µ ‚Üí –∞—É–¥–∏–æ (MP3)
@dp.message(Flow.audio_from_voice)
async def handle_voice_to_audio(message: types.Message, state: FSMContext):
    if not message.voice:
        await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ **–≥–æ–ª–æ—Å–æ–≤–æ–µ**.", parse_mode="Markdown")
        return
    await message.answer("‚è≥ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≥–æ–ª–æ—Å–æ–≤–æ–µ –≤ mp3...")
    with tempfile.TemporaryDirectory() as tmp:
        in_path = Path(tmp) / "voice.ogg"
        out_path = Path(tmp) / "voice.mp3"
        await message.voice.download(destination=in_path)
        cmd = ["ffmpeg", "-i", str(in_path), "-acodec", "libmp3lame", "-b:a", "128k", str(out_path), "-y"]
        try:
            await run_ffmpeg(cmd)
            await message.answer_document(types.FSInputFile(str(out_path)), caption="–ì–æ—Ç–æ–≤–æ: –∞—É–¥–∏–æ—Ñ–∞–π–ª MP3 –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ.")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")
    await state.clear()
    await message.answer("–ï—â—ë —á—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=main_menu())

# 4) –ê—É–¥–∏–æ ‚Üí –≥–æ–ª–æ—Å–æ–≤–æ–µ (voice OGG/Opus)
@dp.message(Flow.audio_to_voice)
async def handle_audio_to_voice(message: types.Message, state: FSMContext):
    audio = message.audio or message.document if (message.document and message.document.mime_type and message.document.mime_type.startswith("audio/")) else None
    if not audio:
        await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ **–∞—É–¥–∏–æ—Ñ–∞–π–ª** (mp3/m4a/ogg).", parse_mode="Markdown")
        return
    await message.answer("‚è≥ –î–µ–ª–∞—é voice –∏–∑ –∞—É–¥–∏–æ...")
    with tempfile.TemporaryDirectory() as tmp:
        in_path = Path(tmp) / "in_audio"
        out_path = Path(tmp) / "voice.ogg"
        await (audio if isinstance(audio, types.Audio) else message.document).download(destination=in_path)
        cmd = ["ffmpeg", "-i", str(in_path), "-acodec", "libopus", "-ar", "48000", "-ac", "1", "-b:a", "48k", str(out_path), "-y"]
        try:
            await run_ffmpeg(cmd)
            await message.answer_voice(types.FSInputFile(str(out_path)), caption="–ì–æ—Ç–æ–≤–æ: voice.")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")
    await state.clear()
    await message.answer("–ï—â—ë —á—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=main_menu())

# 5) –í–∏–¥–µ–æ/–ö—Ä—É–∂–æ–∫ ‚Üí –≥–æ–ª–æ—Å–æ–≤–æ–µ (voice)
@dp.message(Flow.video_to_voice)
async def handle_video_or_circle_to_voice(message: types.Message, state: FSMContext):
    src = None
    kind = None
    if message.video:
        src = message.video; kind = "video"
    elif message.video_note:
        src = message.video_note; kind = "circle"
    elif message.document and message.document.mime_type and message.document.mime_type.startswith("video/"):
        src = message.document; kind = "video"
    if not src:
        await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ **–≤–∏–¥–µ–æ –∏–ª–∏ –∫—Ä—É–∂–æ–∫**.", parse_mode="Markdown"); return

    await message.answer("‚è≥ –ò–∑–≤–ª–µ–∫–∞—é –∑–≤—É–∫ –∏ –¥–µ–ª–∞—é voice...")
    with tempfile.TemporaryDirectory() as tmp:
        in_path = Path(tmp) / ("input.mp4" if kind != "circle" else "circle.mp4")
        out_path = Path(tmp) / "voice.ogg"
        await src.download(destination=in_path)
        cmd = ["ffmpeg", "-i", str(in_path), "-vn", "-acodec", "libopus", "-ar", "48000", "-ac", "1", "-b:a", "48k", str(out_path), "-y"]
        try:
            await run_ffmpeg(cmd)
            await message.answer_voice(types.FSInputFile(str(out_path)), caption="–ì–æ—Ç–æ–≤–æ: voice –∏–∑ –≤–∏–¥–µ–æ/–∫—Ä—É–∂–∫–∞.")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")
    await state.clear()
    await message.answer("–ï—â—ë —á—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=main_menu())

# 6) –í–∏–¥–µ–æ ‚Üí –∫—Ä—É–∂–æ–∫ (video note, square h264+aac)
@dp.message(Flow.video_to_circle)
async def handle_video_to_circle(message: types.Message, state: FSMContext):
    video = message.video or message.document if (message.document and message.document.mime_type and message.document.mime_type.startswith("video/")) else None
    if not video:
        await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ **–≤–∏–¥–µ–æ—Ñ–∞–π–ª** (mp4/mov).", parse_mode="Markdown")
        return
    await message.answer("‚è≥ –î–µ–ª–∞—é –∫—Ä—É–∂–æ–∫...")
    with tempfile.TemporaryDirectory() as tmp:
        in_path = Path(tmp) / "input.mp4"
        out_path = Path(tmp) / "circle.mp4"
        await (video if isinstance(video, types.Video) else message.document).download(destination=in_path)

        # square 720x720, pad if needed; h264 + aac
        vf = "scale=720:720:force_original_aspect_ratio=decrease,pad=720:720:(ow-iw)/2:(oh-ih)/2"
        cmd = [
            "ffmpeg", "-i", str(in_path),
            "-vf", vf,
            "-vcodec", "libx264", "-preset", "veryfast", "-profile:v", "main", "-level", "3.1", "-b:v", "1200k",
            "-acodec", "aac", "-b:a", "96k",
            "-movflags", "+faststart",
            "-pix_fmt", "yuv420p",
            str(out_path), "-y"
        ]
        try:
            await run_ffmpeg(cmd)
            await message.answer_video_note(types.FSInputFile(str(out_path)))
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")
    await state.clear()
    await message.answer("–ï—â—ë —á—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=main_menu())

# 7) –ö—Ä—É–∂–æ–∫ ‚Üí –≤–∏–¥–µ–æ (mp4)
@dp.message(Flow.circle_to_video)
async def handle_circle_to_video(message: types.Message, state: FSMContext):
    if not message.video_note:
        await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ **–∫—Ä—É–∂–æ–∫** (video note).", parse_mode="Markdown")
        return
    await message.answer("‚è≥ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –∫—Ä—É–∂–æ–∫ –≤ –≤–∏–¥–µ–æ...")
    with tempfile.TemporaryDirectory() as tmp:
        in_path = Path(tmp) / "circle.mp4"
        out_path = Path(tmp) / "video.mp4"
        await message.video_note.download(destination=in_path)

        # –ü–µ—Ä–µ–∫–æ–¥–∏—Ä—É–µ–º (–Ω–∞ —Å–ª—É—á–∞–π –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        cmd = [
            "ffmpeg", "-i", str(in_path),
            "-c:v", "libx264", "-preset", "veryfast", "-b:v", "1200k",
            "-c:a", "aac", "-b:a", "96k",
            "-movflags", "+faststart",
            "-pix_fmt", "yuv420p",
            str(out_path), "-y"
        ]
        try:
            await run_ffmpeg(cmd)
            await message.answer_video(types.FSInputFile(str(out_path)), caption="–ì–æ—Ç–æ–≤–æ: –æ–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ (mp4).")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")
    await state.clear()
    await message.answer("–ï—â—ë —á—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=main_menu())

# ---------- Webhook ----------
@app.post("/")
async def webhook(request: Request):
    data = await request.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}
