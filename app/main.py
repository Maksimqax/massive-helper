import os
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Update

TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(TOKEN)
dp = Dispatcher(storage=MemoryStorage())
app = FastAPI()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    kb = InlineKeyboardBuilder()
    kb.button(text="–ê—É–¥–∏–æ üîä", callback_data="menu_audio")
    kb.button(text="–í–∏–¥–µ–æ / –ö—Ä—É–∂–æ–∫ üé¶", callback_data="menu_video")
    return kb.as_markup()

# –ü–æ–¥–º–µ–Ω—é –∞—É–¥–∏–æ
def audio_menu():
    kb = InlineKeyboardBuilder()
    kb.button(text="–ò–∑–≤–ª–µ—á—å –∑–≤—É–∫ –∏–∑ –≤–∏–¥–µ–æ", callback_data="audio_from_video")
    kb.button(text="–ò–∑–≤–ª–µ—á—å –∑–≤—É–∫ –∏–∑ –∫—Ä—É–∂–∫–∞", callback_data="audio_from_circle")
    kb.button(text="–ò–∑–≤–ª–µ—á—å –∑–≤—É–∫ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ", callback_data="audio_from_voice")
    kb.button(text="–ê—É–¥–∏–æ ‚Üí –≥–æ–ª–æ—Å–æ–≤–æ–µ", callback_data="audio_to_voice")
    kb.button(text="–í–∏–¥–µ–æ/–∫—Ä—É–∂–æ–∫ ‚Üí –≥–æ–ª–æ—Å–æ–≤–æ–µ", callback_data="video_to_voice")
    kb.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_main")
    return kb.as_markup()

# –ü–æ–¥–º–µ–Ω—é –≤–∏–¥–µ–æ
def video_menu():
    kb = InlineKeyboardBuilder()
    kb.button(text="–í–∏–¥–µ–æ ‚Üí –∫—Ä—É–∂–æ–∫", callback_data="video_to_circle")
    kb.button(text="–ö—Ä—É–∂–æ–∫ ‚Üí –≤–∏–¥–µ–æ", callback_data="circle_to_video")
    kb.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_main")
    return kb.as_markup()

@dp.message(commands=["start"])
async def start_cmd(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@dp.callback_query()
async def callbacks(cb: types.CallbackQuery):
    if cb.data == "menu_audio":
        await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ-—É—Å–ª—É–≥—É:", reply_markup=audio_menu())
    elif cb.data == "menu_video":
        await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ/–∫—Ä—É–∂–æ–∫-—É—Å–ª—É–≥—É:", reply_markup=video_menu())
    elif cb.data == "back_main":
        await cb.message.edit_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    elif cb.data == "audio_from_video":
        await cb.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ, —è –∏–∑–≤–ª–µ–∫—É –∏–∑ –Ω–µ–≥–æ –∑–≤—É–∫ üé∂")
    elif cb.data == "audio_from_circle":
        await cb.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—Ä—É–∂–æ–∫, —è –∏–∑–≤–ª–µ–∫—É –∏–∑ –Ω–µ–≥–æ –∑–≤—É–∫ üîÑ")
    elif cb.data == "audio_from_voice":
        await cb.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ, —è –ø—Ä–µ–æ–±—Ä–∞–∑—É—é –µ–≥–æ üé§")
    elif cb.data == "audio_to_voice":
        await cb.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª, —è –ø—Ä–µ–≤—Ä–∞—â—É –µ–≥–æ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–µ üéß")
    elif cb.data == "video_to_voice":
        await cb.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ/–∫—Ä—É–∂–æ–∫, —è —Å–¥–µ–ª–∞—é –∏–∑ –Ω–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ üé•")
    elif cb.data == "video_to_circle":
        await cb.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ, —è —Å–¥–µ–ª–∞—é –∏–∑ –Ω–µ–≥–æ –∫—Ä—É–∂–æ–∫ üìº")
    elif cb.data == "circle_to_video":
        await cb.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—Ä—É–∂–æ–∫, —è —Å–¥–µ–ª–∞—é –∏–∑ –Ω–µ–≥–æ –æ–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ üîÑ")

@app.post("/")
async def webhook(request: Request):
    data = await request.json()
    update = Update.model_validate(data, context={"bot": bot})
    await dp.feed_update(bot, update)
    return {"ok": True}
