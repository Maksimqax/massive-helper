import asyncio
import os
import tempfile
from pathlib import Path

from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import PlainTextResponse

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ChatAction, ContentType
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    FSInputFile,
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram import Router
from aiogram.types import Update

import ffmpeg

# ----------- ENV -----------
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "").strip()
SECRET_TOKEN = os.getenv("SECRET_TOKEN", "").strip()
MAX_FILE_MB = int(os.getenv("MAX_FILE_MB", "18"))  # Telegram limit for free bots ~20MB via download

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
router = Router()
dp.include_router(router)

app = FastAPI()


# ----------- Keyboards -----------
def main_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üéß –ê—É–¥–∏–æ"), KeyboardButton(text="üé¶ –í–∏–¥–µ–æ / –ö—Ä—É–∂–æ–∫")],
            [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")],
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª‚Ä¶",
    )


def audio_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üéûÔ∏è –ò–∑–≤–ª–µ—á—å –∑–≤—É–∫ –∏–∑ –≤–∏–¥–µ–æ (mp3)")],
            [KeyboardButton(text="‚≠ï –ò–∑–≤–ª–µ—á—å –∑–≤—É–∫ –∏–∑ –∫—Ä—É–∂–∫–∞ (mp3)")],
            [KeyboardButton(text="üéôÔ∏è –ò–∑–≤–ª–µ—á—å –∑–≤—É–∫ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ (mp3)")],
            [KeyboardButton(text="üîä –ê—É–¥–∏–æ—Ñ–∞–π–ª ‚Üí –ì–æ–ª–æ—Å–æ–≤–æ–µ")],
            [KeyboardButton(text="‚≠ï/üéûÔ∏è ‚Üí –ì–æ–ª–æ—Å–æ–≤–æ–µ")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True,
        input_field_placeholder="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞‚Ä¶",
    )


def video_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üéûÔ∏è –í–∏–¥–µ–æ ‚Üí –ö—Ä—É–∂–æ–∫")],
            [KeyboardButton(text="‚≠ï –ö—Ä—É–∂–æ–∫ ‚Üí –í–∏–¥–µ–æ")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True,
        input_field_placeholder="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞‚Ä¶",
    )


WELCOME = (
    "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –ø–æ–º–æ–≥—É —Å –º–µ–¥–∏–∞-—Ñ–∞–π–ª–∞–º–∏.\n\n"
    "‚Ä¢ <b>üéß –ê—É–¥–∏–æ</b> ‚Äî –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–≤—É–∫–∞, —Å–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö.\n"
    "‚Ä¢ <b>üé¶ –í–∏–¥–µ–æ / –ö—Ä—É–∂–æ–∫</b> ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ ‚ÜîÔ∏è –∫—Ä—É–∂–æ–∫.\n\n"
    "–í—ã–±–∏—Ä–∞–π—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ üëá"
)


# ----------- FSM -----------
class Mode(StatesGroup):
    audio_extract_from_video = State()
    audio_extract_from_circle = State()
    audio_extract_from_voice = State()
    audio_file_to_voice = State()
    media_to_voice = State()
    video_to_circle = State()
    circle_to_video = State()
    idle = State()


# ----------- Helpers -----------
async def send_action(msg: Message, action: ChatAction, seconds: float = 1.0):
    try:
        await bot.send_chat_action(msg.chat.id, action)
    except Exception:
        return
    await asyncio.sleep(seconds)


def _fits_limit(file_size: int) -> bool:
    return file_size <= MAX_FILE_MB * 1024 * 1024


async def tg_download_to_temp(file_id: str, suffix: str) -> Path:
    f = await bot.get_file(file_id)
    if not _fits_limit(f.file_size or 0):
        raise HTTPException(status_code=413, detail="File too big for bot setting MAX_FILE_MB")
    tmpdir = Path(tempfile.mkdtemp())
    out_path = tmpdir / f"src{suffix}"
    # aiogram v3: bot.download can accept File or str id
    await bot.download(f, destination=str(out_path))
    return out_path


def ffmpeg_square_240(src: Path, dst: Path):
    """Center-crop to square and scale to 240x240 ‚Äî required for video_note."""
    probe = ffmpeg.probe(str(src))
    streams = [s for s in probe["streams"] if s["codec_type"] == "video"]
    if not streams:
        raise RuntimeError("No video stream found")
    w = int(streams[0]["width"])
    h = int(streams[0]["height"])
    side = min(w, h)
    x = (w - side) // 2
    y = (h - side) // 2

    (
        ffmpeg
        .input(str(src))
        .crop(x, y, side, side)
        .filter("scale", 240, 240)
        .output(str(dst), vcodec="libx264", acodec="aac", pix_fmt="yuv420p", video_bitrate="500k", audio_bitrate="64k", movflags="+faststart")
        .overwrite_output()
        .run(quiet=True)
    )


def ffmpeg_extract_audio(src: Path, dst: Path):
    (
        ffmpeg
        .input(str(src))
        .output(str(dst), acodec="libmp3lame", audio_bitrate="128k", vn=None)
        .overwrite_output()
        .run(quiet=True)
    )


def ffmpeg_video_from_circle(src: Path, dst: Path):
    """Just rewrap/reencode to standard mp4 1:1 for sending as video."""
    (
        ffmpeg
        .input(str(src))
        .filter("scale", "min(iw,ih)", "min(iw,ih)")
        .output(str(dst), vcodec="libx264", acodec="aac", pix_fmt="yuv420p", movflags="+faststart")
        .overwrite_output()
        .run(quiet=True)
    )


# ----------- Handlers -----------
@router.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(WELCOME, reply_markup=main_menu())


@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def help_msg(message: Message):
    txt = (
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "‚Ä¢ üéûÔ∏è –í–∏–¥–µ–æ ‚Üí –ö—Ä—É–∂–æ–∫ ‚Äî –∫–≤–∞–¥—Ä–∞—Ç 1:1, –º–∞—Å—à—Ç–∞–± 240√ó240, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è Telegram.\n"
        "‚Ä¢ ‚≠ï –ö—Ä—É–∂–æ–∫ ‚Üí –í–∏–¥–µ–æ ‚Äî –≤–µ—Ä–Ω—É –æ–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ mp4.\n"
        "‚Ä¢ üéß –ê—É–¥–∏–æ ‚Äî –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–≤—É–∫–∞ (mp3) –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –º–µ–¥–∏–∞ <b>–ø–æ—Å–ª–µ</b> –≤—ã–±–æ—Ä–∞ –Ω—É–∂–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."
    )
    await message.answer(txt, reply_markup=main_menu())


@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())


# --- Open submenus
@router.message(F.text == "üéß –ê—É–¥–∏–æ")
async def open_audio_menu(message: Message, state: FSMContext):
    await state.set_state(Mode.idle)
    await message.answer(
        "–†–∞–∑–¥–µ–ª <b>–ê—É–¥–∏–æ</b>:\n"
        "‚Ä¢ –ò–∑–≤–ª–µ—á—å mp3 –∏–∑ –≤–∏–¥–µ–æ/–∫—Ä—É–∂–∫–∞/–≥–æ–ª–æ—Å–æ–≤–æ–≥–æ\n"
        "‚Ä¢ –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ/–∫—Ä—É–∂–æ–∫ –≤ <b>–≥–æ–ª–æ—Å–æ–≤–æ–µ</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.",
        reply_markup=audio_menu(),
    )


@router.message(F.text == "üé¶ –í–∏–¥–µ–æ / –ö—Ä—É–∂–æ–∫")
async def open_video_menu(message: Message, state: FSMContext):
    await state.set_state(Mode.idle)
    await message.answer(
        "–†–∞–∑–¥–µ–ª <b>–í–∏–¥–µ–æ / –ö—Ä—É–∂–æ–∫</b>:\n"
        "‚Ä¢ –í–∏–¥–µ–æ ‚Üí –ö—Ä—É–∂–æ–∫ (–∫–≤–∞–¥—Ä–∞—Ç 240√ó240)\n"
        "‚Ä¢ –ö—Ä—É–∂–æ–∫ ‚Üí –í–∏–¥–µ–æ (mp4)\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.",
        reply_markup=video_menu(),
    )


# --- Audio actions selection
@router.message(F.text == "üéûÔ∏è –ò–∑–≤–ª–µ—á—å –∑–≤—É–∫ –∏–∑ –≤–∏–¥–µ–æ (mp3)")
async def sel_audio_from_video(message: Message, state: FSMContext):
    await state.set_state(Mode.audio_extract_from_video)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ. –Ø <i>–∏–∑–≤–ª–µ–∫–∞—é –∑–≤—É–∫‚Ä¶</i>")


@router.message(F.text == "‚≠ï –ò–∑–≤–ª–µ—á—å –∑–≤—É–∫ –∏–∑ –∫—Ä—É–∂–∫–∞ (mp3)")
async def sel_audio_from_circle(message: Message, state: FSMContext):
    await state.set_state(Mode.audio_extract_from_circle)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—Ä—É–∂–æ–∫. –Ø <i>–∏–∑–≤–ª–µ–∫–∞—é –∑–≤—É–∫‚Ä¶</i>")


@router.message(F.text == "üéôÔ∏è –ò–∑–≤–ª–µ—á—å –∑–≤—É–∫ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ (mp3)")
async def sel_audio_from_voice(message: Message, state: FSMContext):
    await state.set_state(Mode.audio_extract_from_voice)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ. –Ø <i>–∏–∑–≤–ª–µ–∫–∞—é –∑–≤—É–∫‚Ä¶</i>")


@router.message(F.text == "üîä –ê—É–¥–∏–æ—Ñ–∞–π–ª ‚Üí –ì–æ–ª–æ—Å–æ–≤–æ–µ")
async def sel_audio_to_voice(message: Message, state: FSMContext):
    await state.set_state(Mode.audio_file_to_voice)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ-—Ñ–∞–π–ª. –Ø <i>–∑–∞–ø–∏—Å—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ‚Ä¶</i>")


@router.message(F.text == "‚≠ï/üéûÔ∏è ‚Üí –ì–æ–ª–æ—Å–æ–≤–æ–µ")
async def sel_media_to_voice(message: Message, state: FSMContext):
    await state.set_state(Mode.media_to_voice)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ –∫—Ä—É–∂–æ–∫. –Ø <i>–∑–∞–ø–∏—Å—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ‚Ä¶</i>")


# --- Video/Circle actions selection
@router.message(F.text == "üéûÔ∏è –í–∏–¥–µ–æ ‚Üí –ö—Ä—É–∂–æ–∫")
async def sel_video_to_circle(message: Message, state: FSMContext):
    await state.set_state(Mode.video_to_circle)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ. –Ø <i>–æ—Ç–ø—Ä–∞–≤–ª—è—é –∫—Ä—É–∂–æ–∫‚Ä¶</i>")


@router.message(F.text == "‚≠ï –ö—Ä—É–∂–æ–∫ ‚Üí –í–∏–¥–µ–æ")
async def sel_circle_to_video(message: Message, state: FSMContext):
    await state.set_state(Mode.circle_to_video)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—Ä—É–∂–æ–∫. –Ø <i>–æ—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ‚Ä¶</i>")


# ----------- MEDIA HANDLERS -----------
@router.message(Mode.audio_extract_from_video, F.video | F.document)
async def handle_audio_from_video(message: Message, state: FSMContext):
    await send_action(message, ChatAction.UPLOAD_VOICE, 0.5)
    file_id = message.video.file_id if message.video else message.document.file_id
    src = await tg_download_to_temp(file_id, ".mp4")
    out_mp3 = src.with_suffix(".mp3")
    ffmpeg_extract_audio(src, out_mp3)

    await message.answer_document(FSInputFile(out_mp3), caption=None)
    await message.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ")


@router.message(Mode.audio_extract_from_circle, F.video_note)
async def handle_audio_from_circle(message: Message, state: FSMContext):
    await send_action(message, ChatAction.UPLOAD_VOICE, 0.5)
    src = await tg_download_to_temp(message.video_note.file_id, ".mp4")
    out_mp3 = src.with_suffix(".mp3")
    ffmpeg_extract_audio(src, out_mp3)

    await message.answer_document(FSInputFile(out_mp3), caption=None)
    await message.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ")


@router.message(Mode.audio_extract_from_voice, F.voice)
async def handle_audio_from_voice(message: Message, state: FSMContext):
    await send_action(message, ChatAction.UPLOAD_VOICE, 0.5)
    src = await tg_download_to_temp(message.voice.file_id, ".oga")
    out_mp3 = src.with_suffix(".mp3")
    ffmpeg_extract_audio(src, out_mp3)

    await message.answer_document(FSInputFile(out_mp3), caption=None)
    await message.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ")


@router.message(Mode.audio_file_to_voice, F.audio | F.document)
async def handle_audio_to_voice(message: Message, state: FSMContext):
    await send_action(message, ChatAction.RECORD_VOICE, 0.8)
    file_id = message.audio.file_id if message.audio else message.document.file_id
    src = await tg_download_to_temp(file_id, ".mp3")
    # Re-encode to OGG/OPUS voice container
    out_oga = src.with_suffix(".ogg")
    (
        ffmpeg
        .input(str(src))
        .output(str(out_oga), acodec="libopus", audio_bitrate="48k", ar=48000, vn=None)
        .overwrite_output()
        .run(quiet=True)
    )
    await message.answer_voice(FSInputFile(out_oga), caption=None)
    await message.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ")


@router.message(Mode.media_to_voice, (F.video | F.video_note))
async def handle_media_to_voice(message: Message, state: FSMContext):
    await send_action(message, ChatAction.RECORD_VOICE, 0.8)
    if message.video:
        src = await tg_download_to_temp(message.video.file_id, ".mp4")
    else:
        src = await tg_download_to_temp(message.video_note.file_id, ".mp4")
    out_oga = src.with_suffix(".ogg")
    (
        ffmpeg
        .input(str(src))
        .output(str(out_oga), acodec="libopus", audio_bitrate="48k", ar=48000, vn=None)
        .overwrite_output()
        .run(quiet=True)
    )
    await message.answer_voice(FSInputFile(out_oga), caption=None)
    await message.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ")


@router.message(Mode.video_to_circle, F.video | F.document)
async def handle_video_to_circle(message: Message, state: FSMContext):
    await send_action(message, ChatAction.RECORD_VIDEO_NOTE, 0.8)
    file_id = message.video.file_id if message.video else message.document.file_id
    src = await tg_download_to_temp(file_id, ".mp4")
    out_circle = src.with_name("circle.mp4")
    ffmpeg_square_240(src, out_circle)

    await message.answer_video_note(FSInputFile(out_circle))
    await message.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ")


@router.message(Mode.circle_to_video, F.video_note)
async def handle_circle_to_video(message: Message, state: FSMContext):
    await send_action(message, ChatAction.UPLOAD_VIDEO, 0.8)
    src = await tg_download_to_temp(message.video_note.file_id, ".mp4")
    out_video = src.with_name("from_circle.mp4")
    ffmpeg_video_from_circle(src, out_video)

    await message.answer_video(FSInputFile(out_video), caption=None)
    await message.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ")


# Fallbacks when media sent without chosen mode
@router.message(F.video | F.video_note | F.voice | F.audio | F.document)
async def ask_choose_mode(message: Message, state: FSMContext):
    await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ üëá", reply_markup=main_menu())


# ----------- FastAPI endpoints -----------
@app.get("/", response_class=PlainTextResponse)
async def root():
    return "OK"


@app.post("/webhook")
async def webhook(request: Request):
    if SECRET_TOKEN:
        secret = request.headers.get("X-Telegram-Bot-Api-Secret-Token", "")
        if secret != SECRET_TOKEN:
            raise HTTPException(status_code=403, detail="Bad secret")

    data = await request.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}


# Optional helper to set webhook (call once manually)
@app.get("/set-webhook", response_class=PlainTextResponse)
async def set_webhook():
    if not WEBHOOK_URL:
        raise HTTPException(status_code=400, detail="WEBHOOK_URL env not set")
    await bot.set_webhook(url=WEBHOOK_URL + "/webhook", secret_token=SECRET_TOKEN or None)
    return "Webhook set"