
import os
import tempfile
import asyncio
import subprocess
from typing import Optional

from fastapi import FastAPI, Request, Response, HTTPException
from fastapi.responses import PlainTextResponse

from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, CallbackQuery, FSInputFile, Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ChatAction
from aiogram.exceptions import TelegramBadRequest

from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN", "")
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "")
SECRET_TOKEN = os.getenv("SECRET_TOKEN", "")
MAX_FILE_MB = int(os.getenv("MAX_FILE_MB", "18"))

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

# aiogram 3.7+ way to set parse_mode
from aiogram.client.default import DefaultBotProperties

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
router = Router()
dp.include_router(router)

app = FastAPI()

# ---- Keyboards ----

def main_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="üéß –ê—É–¥–∏–æ", callback_data="menu:audio")
    kb.button(text="üé¶ –í–∏–¥–µ–æ/–ö—Ä—É–∂–æ–∫", callback_data="menu:video")
    kb.adjust(1)
    return kb.as_markup()

def main_reply_kb():
    return ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [KeyboardButton(text="üé¶ –í–∏–¥–µ–æ/–ö—Ä—É–∂–æ–∫"), KeyboardButton(text="üéß –ê—É–¥–∏–æ")],
            
        ]
    )

def video_reply_kb():
    return ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [KeyboardButton(text="üé• –í–∏–¥–µ–æ ‚Üí ‚≠ï –ö—Ä—É–∂–æ–∫")],
            [KeyboardButton(text="‚≠ï –ö—Ä—É–∂–æ–∫ ‚Üí üé• –í–∏–¥–µ–æ")],
            [KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥")]
        ]
    )

def audio_reply_kb():
    return ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [KeyboardButton(text="üé¨ –í–∏–¥–µ–æ ‚Üí üîä –ê—É–¥–∏–æ (MP3)")],
            [KeyboardButton(text="‚≠ï –ö—Ä—É–∂–æ–∫ ‚Üí üîä –ê—É–¥–∏–æ (MP3)")],
            [KeyboardButton(text="üó£Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ ‚Üí üîä –ê—É–¥–∏–æ (MP3)")],
            [KeyboardButton(text="üéµ –ê—É–¥–∏–æ ‚Üí üó£Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ")],
            [KeyboardButton(text="üé¨/‚≠ï –í–∏–¥–µ–æ/–ö—Ä—É–∂–æ–∫ ‚Üí üó£Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ")],
            [KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥")]
        ]
    )

    kb = InlineKeyboardBuilder()
    kb.button(text="üéß –ê—É–¥–∏–æ", callback_data="menu:audio")
    kb.button(text="üé¶ –í–∏–¥–µ–æ/–ö—Ä—É–∂–æ–∫", callback_data="menu:video")
    kb.adjust(1)
    return kb.as_markup()

def audio_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="üé¨ –í–∏–¥–µ–æ ‚Üí üîä –ê—É–¥–∏–æ (MP3)", callback_data="audio:from_video")
    kb.button(text="‚≠ï –ö—Ä—É–∂–æ–∫ ‚Üí üîä –ê—É–¥–∏–æ (MP3)", callback_data="audio:from_circle")
    kb.button(text="üó£Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ ‚Üí üîä –ê—É–¥–∏–æ (MP3)", callback_data="audio:from_voice")
    kb.button(text="üéµ –ê—É–¥–∏–æ ‚Üí üó£Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ", callback_data="audio:audio_to_voice")
    kb.button(text="üé¨/‚≠ï –í–∏–¥–µ–æ/–ö—Ä—É–∂–æ–∫ ‚Üí üó£Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ", callback_data="audio:media_to_voice")
    kb.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu:back")
    kb.adjust(1)
    return kb.as_markup()

def video_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="üé• –í–∏–¥–µ–æ ‚Üí ‚≠ï –ö—Ä—É–∂–æ–∫", callback_data="video:to_circle")
    kb.button(text="‚≠ï –ö—Ä—É–∂–æ–∫ ‚Üí üé• –í–∏–¥–µ–æ", callback_data="video:to_video")
    kb.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu:back")
    kb.adjust(1)
    return kb.as_markup()

# ---- State ----

class Flow(StatesGroup):
    waiting_input = State()  # store action name in state data: {"action": "video_to_circle"}

# ---- Helpers ----

def bytes_to_mb(n: int) -> float:
    return round(n / (1024 * 1024), 2)


async def _send_action_periodically(chat_id: int, action: ChatAction):
    """Send chat action every ~4s while long task runs."""
    try:
        while True:
            await bot.send_chat_action(chat_id, action=action)
            await asyncio.sleep(4)
    except asyncio.CancelledError:
        pass

async def run_ffmpeg(cmd: list):
    """Run ffmpeg command in thread executor; raise on non-zero return."""
    loop = asyncio.get_running_loop()
    def _run():
        proc = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        if proc.returncode != 0:
            raise RuntimeError(proc.stderr[-4000:])
        return proc
    return await loop.run_in_executor(None, _run)

async def tg_download_to_temp(file_id: str, suffix: str) -> str:
    f = await bot.get_file(file_id)
    # size validation if known
    size = getattr(f, "file_size", None)
    if size is not None and size > MAX_FILE_MB * 1024 * 1024:
        raise HTTPException(status_code=400, detail=f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {bytes_to_mb(size)} MB (–ª–∏–º–∏—Ç {MAX_FILE_MB} MB)")
    fd, path = tempfile.mkstemp(suffix=suffix)
    os.close(fd)
    await bot.download(f, destination=path)
    return path



async def ff_extract_audio(src: str) -> str:
    """Extract audio track to mp3 from any media."""
    dst = src.rsplit(".", 1)[0] + ".mp3"
    cmd = ["ffmpeg", "-y", "-i", src, "-vn", "-acodec", "libmp3lame", "-ar", "48000", "-b:a", "128k", dst]
    await run_ffmpeg(cmd)
    return dst

async def ff_to_mp3(src: str) -> str:
    """Any audio (incl. ogg/opus) -> mp3 128k 48kHz."""
    dst = src.rsplit(".", 1)[0] + ".mp3"
    cmd = ["ffmpeg", "-y", "-i", src, "-vn", "-acodec", "libmp3lame", "-ar", "48000", "-b:a", "128k", dst]
    await run_ffmpeg(cmd)
    return dst

    """Crop to square for video_note and **preserve audio** (AAC)."""
    dst = src.rsplit(".", 1)[0] + "_circle.mp4"
    # 1:1 square, 480x480, keep audio (AAC), 30fps
    vf = "crop='min(iw,ih)':'min(iw,ih)',scale=480:480:flags=lanczos,fps=30,format=yuv420p"
    cmd = [
        "ffmpeg", "-y", "-i", src,
        "-vf", vf,
        "-c:v", "libx264", "-preset", "veryfast", "-profile:v", "baseline", "-level", "3.0",
        "-pix_fmt", "yuv420p",
        "-c:a", "aac", "-b:a", "128k", "-ac", "2", "-ar", "48000",
        "-movflags", "+faststart",
        dst
    ]
    await run_ffmpeg(cmd)
    return dst

async def ff_circle_to_video(src: str) -> str:
    dst = src.rsplit(".", 1)[0] + "_video.mp4"
    cmd = ["ffmpeg", "-y", "-i", src, "-c:v", "libx264", "-pix_fmt", "yuv420p", "-c:a", "aac", "-b:a", "128k", dst]
    await run_ffmpeg(cmd)
    return dst

async def ff_to_mp3(src: str) -> str:
    """Any audio (incl. ogg/opus) -> mp3 128k 48kHz."""
    dst = src.rsplit(".", 1)[0] + ".mp3"
    cmd = ["ffmpeg", "-y", "-i", src, "-vn", "-acodec", "libmp3lame", "-ar", "48000", "-b:a", "128k", dst]
    await run_ffmpeg(cmd)
    return dst

async def ff_to_mp3(src: str) -> str:
    """Any audio (incl. ogg/opus) -> mp3 128k 48kHz."""
    dst = src.rsplit(".", 1)[0] + ".mp3"
    cmd = ["ffmpeg", "-y", "-i", src, "-vn", "-acodec", "libmp3lame", "-ar", "48000", "-b:a", "128k", dst]
    await run_ffmpeg(cmd)
    return dst


    dst = src.rsplit(".", 1)[0] + ".mp3"
    cmd = ["ffmpeg", "-y", "-i", src, "-vn", "-acodec", "libmp3lame", "-ar", "48000", "-b:a", "128k", dst]
    await run_ffmpeg(cmd)
    return dst

async def ff_to_voice(src: str) -> str:
    """Any audio -> ogg/opus voice."""
    dst = src.rsplit(".", 1)[0] + ".ogg"
    cmd = ["ffmpeg", "-y", "-i", src, "-c:a", "libopus", "-b:a", "64k", "-vbr", "on", "-ac", "1", "-ar", "48000", dst]
    await run_ffmpeg(cmd)
    return dst


async def ff_video_to_circle(src: str) -> str:
    """Crop to square for video_note and preserve audio (AAC)."""
    dst = src.rsplit(".", 1)[0] + "_circle.mp4"
    vf = "crop='min(iw,ih)':'min(iw,ih)',scale=480:480:flags=lanczos,fps=30,format=yuv420p"
    cmd = [
        "ffmpeg", "-y", "-i", src,
        "-vf", vf,
        "-c:v", "libx264", "-preset", "veryfast", "-profile:v", "baseline", "-level", "3.0",
        "-pix_fmt", "yuv420p",
        "-c:a", "aac", "-b:a", "128k", "-ac", "2", "-ar", "48000",
        "-movflags", "+faststart",
        dst
    ]
    await run_ffmpeg(cmd)
    return dst

async def ff_extract_audio(src: str) -> str:
    """Extract audio track to mp3 from any media."""
    dst = src.rsplit(".", 1)[0] + ".mp3"
    cmd = ["ffmpeg", "-y", "-i", src, "-vn", "-acodec", "libmp3lame", "-ar", "48000", "-b:a", "128k", dst]
    await run_ffmpeg(cmd)
    return dst

async def ff_to_mp3(src: str) -> str:
    """Any audio (incl. ogg/opus) -> mp3 128k 48kHz."""
    dst = src.rsplit(".", 1)[0] + ".mp3"
    cmd = ["ffmpeg", "-y", "-i", src, "-vn", "-acodec", "libmp3lame", "-ar", "48000", "-b:a", "128k", dst]
    await run_ffmpeg(cmd)
    return dst

# ---- Handlers ----


@router.message(CommandStart())
async def on_start(message: Message, state: FSMContext):
    await state.clear()
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –º–æ–∂–Ω–æ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å:\n"
        
        " üé• –í–∏–¥–µ–æ –≤ ‚≠ï –ö—Ä—É–∂–æ–∫\n"
        
        " üé• –í–∏–¥–µ–æ / –ö—Ä—É–∂–æ–∫ ‚≠ï –≤ üîä –ê—É–¥–∏–æ—Ñ–∞–π–ª\n"
        
        " üéµ –ê—É–¥–∏–æ—Ñ–∞–π–ª –≤ üó£Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        
        "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    await message.answer(text, reply_markup=main_reply_kb())


@router.callback_query(F.data == "menu:audio")
async def cb_audio(c: CallbackQuery, state: FSMContext):
    await state.set_state(Flow.waiting_input)
    await state.update_data(action=None)  # clear
    try:
        await c.message.edit_text("üéß –ê—É–¥–∏–æ: –≤—ã–±–µ—Ä–∏ —Ñ—É–Ω–∫—Ü–∏—é", reply_markup=audio_kb())
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await c.answer("–í—ã —É–∂–µ –≤ —ç—Ç–æ–º –º–µ–Ω—é", show_alert=False)
        else:
            raise
    else:
        await c.answer()

@router.callback_query(F.data == "menu:video")
async def cb_video(c: CallbackQuery, state: FSMContext):
    await state.set_state(Flow.waiting_input)
    await state.update_data(action=None)
    try:
        await c.message.edit_text("üé¶ –í–∏–¥–µ–æ / –ö—Ä—É–∂–æ–∫: –≤—ã–±–µ—Ä–∏ —Ñ—É–Ω–∫—Ü–∏—é", reply_markup=video_kb())
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await c.answer("–í—ã —É–∂–µ –≤ —ç—Ç–æ–º –º–µ–Ω—é", show_alert=False)
        else:
            raise
    else:
        await c.answer()

@router.callback_query(F.data == "menu:back")
async def cb_back(c: CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await c.message.edit_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb())
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await c.answer("–í—ã —É–∂–µ –≤ —ç—Ç–æ–º –º–µ–Ω—é", show_alert=False)
        else:
            raise
    else:
        await c.answer()

# Audio actions selection

@router.callback_query(F.data.startswith("audio:"))
async def select_audio(c: CallbackQuery, state: FSMContext):
    m = {
        "audio:from_video": "audio_from_video",
        "audio:from_circle": "audio_from_circle",
        "audio:from_voice": "audio_from_voice",
        "audio:audio_to_voice": "audio_to_voice",
        "audio:media_to_voice": "media_to_voice",
    }[c.data]
    await state.update_data(action=m)
    prompts = {
        "audio_from_video": "üîä **–î–æ—Å—Ç–∞—é –∑–≤—É–∫ –∏–∑ –≤–∏–¥–µ–æ**\n–ü—Ä–∏—à–ª–∏ –≤–∏–¥–µ–æ üé¨ ‚Äî –≤–µ—Ä–Ω—É –æ—Ç–¥–µ–ª—å–Ω–æ –∞—É–¥–∏–æ (mp3).",
        "audio_from_circle": "üîä **–î–æ—Å—Ç–∞—é –∑–≤—É–∫ –∏–∑ –∫—Ä—É–∂–∫–∞**\n–ü—Ä–∏—à–ª–∏ –∫—Ä—É–∂–æ–∫ ‚≠ï ‚Äî –≤–µ—Ä–Ω—É –∞—É–¥–∏–æ (mp3).",
        "audio_from_voice": "üîä **–ì–æ–ª–æ—Å–æ–≤–æ–µ ‚Üí –∞—É–¥–∏–æ**\n–ü—Ä–∏—à–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ üó£Ô∏è ‚Äî –ø—Ä–µ–æ–±—Ä–∞–∑—É—é –≤ .ogg/.mp3.",
        "audio_to_voice": "üó£Ô∏è **–ê—É–¥–∏–æ—Ñ–∞–π–ª ‚Üí –≥–æ–ª–æ—Å–æ–≤–æ–µ**\n–ü—Ä–∏—à–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª (mp3/wav/ogg) ‚Äî —Å–¥–µ–ª–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (ogg/opus).",
        "media_to_voice": "üó£Ô∏è **–í–∏–¥–µ–æ/–∫—Ä—É–∂–æ–∫ ‚Üí –≥–æ–ª–æ—Å–æ–≤–æ–µ**\n–ü—Ä–∏—à–ª–∏ –≤–∏–¥–µ–æ üé¨ –∏–ª–∏ –∫—Ä—É–∂–æ–∫ ‚≠ï ‚Äî —Å–¥–µ–ª–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ (ogg/opus).",
    }
    await state.set_state(Flow.waiting_input)
    try:
        await c.message.edit_text(prompts[m], reply_markup=audio_kb(), parse_mode="Markdown")
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await c.answer("–í—ã —É–∂–µ –≤ —ç—Ç–æ–º –º–µ–Ω—é", show_alert=False)
        else:
            raise
    else:
        await c.answer()


# Video actions selection

@router.callback_query(F.data.startswith("video:"))
async def select_video(c: CallbackQuery, state: FSMContext):
    m = {
        "video:to_circle": "video_to_circle",
        "video:to_video": "circle_to_video",
    }[c.data]
    await state.update_data(action=m)
    prompts = {
        "video_to_circle": "‚≠ï **–í–∏–¥–µ–æ ‚Üí –ö—Ä—É–∂–æ–∫**\n–ü—Ä–∏—à–ª–∏ –æ–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ üé• ‚Äî —è —Å–¥–µ–ª–∞—é –∏–∑ –Ω–µ–≥–æ –∫—Ä—É–∂–æ–∫. –í–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –¥–æ–ª—å—à–µ ~60 —Å–µ–∫ –∏ –Ω–µ –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞ —Ñ–∞–π–ª–∞.\n\n–ì–æ—Ç–æ–≤? –û—Ç–ø—Ä–∞–≤–ª—è–π —Ñ–∞–π–ª.",
        "circle_to_video": "üé• **–ö—Ä—É–∂–æ–∫ ‚Üí –í–∏–¥–µ–æ**\n–ü—Ä–∏—à–ª–∏ –∫—Ä—É–∂–æ–∫ ‚≠ï ‚Äî –≤–µ—Ä–Ω—É –µ–≥–æ –≤ –æ–±—ã—á–Ω—ã–π –≤–∏–¥–µ–æ—Ñ–∞–π–ª —Å –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–æ–π.\n\n–ì–æ—Ç–æ–≤? –û—Ç–ø—Ä–∞–≤–ª—è–π —Ñ–∞–π–ª.",
    }
    try:
        await c.message.edit_text(prompts[m], reply_markup=video_kb(), parse_mode="Markdown")
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await c.answer("–í—ã —É–∂–µ –≤ —ç—Ç–æ–º –º–µ–Ω—é", show_alert=False)
        else:
            raise
    else:
        await c.answer()



# ---- Reply Keyboard handlers ----

@router.message(F.text == "üé¶ –í–∏–¥–µ–æ/–ö—Ä—É–∂–æ–∫")
async def on_text_menu_video(message: Message, state: FSMContext):
    await state.set_state(Flow.waiting_input)
    await state.update_data(action=None)
    await message.answer("üé¶ –í–∏–¥–µ–æ / –ö—Ä—É–∂–æ–∫: –≤—ã–±–µ—Ä–∏ —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ ‚§µÔ∏è", reply_markup=video_reply_kb())

@router.message(F.text == "üéß –ê—É–¥–∏–æ")
async def on_text_menu_audio(message: Message, state: FSMContext):
    await state.set_state(Flow.waiting_input)
    await state.update_data(action=None)
    await message.answer("üéß –ê—É–¥–∏–æ: –≤—ã–±–µ—Ä–∏ —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ ‚§µÔ∏è", reply_markup=audio_reply_kb())

@router.message(F.text == "‚¨Ö –ù–∞–∑–∞–¥")
async def on_text_back(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_reply_kb())

# Functions (reply keyboard)
@router.message(F.text == "üé• –í–∏–¥–µ–æ ‚Üí ‚≠ï –ö—Ä—É–∂–æ–∫")
async def on_text_v_to_circle(message: Message, state: FSMContext):
    await state.update_data(action="video_to_circle")
    await message.answer("–ü—Ä–∏—à–ª–∏ –≤–∏–¥–µ–æ üé• ‚Äî —Å–¥–µ–ª–∞—é **–∫—Ä—É–∂–æ–∫** ‚≠ï.", reply_markup=video_reply_kb())

@router.message(F.text == "‚≠ï –ö—Ä—É–∂–æ–∫ ‚Üí üé• –í–∏–¥–µ–æ")
async def on_text_circle_to_v(message: Message, state: FSMContext):
    await state.update_data(action="circle_to_video")
    await message.answer("–ü—Ä–∏—à–ª–∏ –∫—Ä—É–∂–æ–∫ ‚≠ï ‚Äî –≤–µ—Ä–Ω—É –æ–±—ã—á–Ω–æ–µ **–≤–∏–¥–µ–æ** üé•.", reply_markup=video_reply_kb())

@router.message(F.text == "üé¨ –í–∏–¥–µ–æ ‚Üí üîä –ê—É–¥–∏–æ (MP3)")
async def on_text_a_from_video(message: Message, state: FSMContext):
    await state.update_data(action="audio_from_video")
    await message.answer("–ü—Ä–∏—à–ª–∏ –≤–∏–¥–µ–æ üé¨ ‚Äî –¥–æ—Å—Ç–∞–Ω—É **–∞—É–¥–∏–æ (MP3)** üîä.", reply_markup=audio_reply_kb())

@router.message(F.text == "‚≠ï –ö—Ä—É–∂–æ–∫ ‚Üí üîä –ê—É–¥–∏–æ (MP3)")
async def on_text_a_from_circle(message: Message, state: FSMContext):
    await state.update_data(action="audio_from_circle")
    await message.answer("–ü—Ä–∏—à–ª–∏ –∫—Ä—É–∂–æ–∫ ‚≠ï ‚Äî –¥–æ—Å—Ç–∞–Ω—É **–∞—É–¥–∏–æ (MP3)** üîä.", reply_markup=audio_reply_kb())

@router.message(F.text == "üó£Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ ‚Üí üîä –ê—É–¥–∏–æ (MP3)")
async def on_text_a_from_voice(message: Message, state: FSMContext):
    await state.update_data(action="audio_from_voice")
    await message.answer("–ü—Ä–∏—à–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ üó£Ô∏è ‚Äî —Å–¥–µ–ª–∞—é **–∞—É–¥–∏–æ (MP3)** üîä.", reply_markup=audio_reply_kb())

@router.message(F.text == "üéµ –ê—É–¥–∏–æ ‚Üí üó£Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ")
async def on_text_audio_to_voice(message: Message, state: FSMContext):
    await state.update_data(action="audio_to_voice")
    await message.answer("–ü—Ä–∏—à–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª üéµ ‚Äî –≤–µ—Ä–Ω—É **–≥–æ–ª–æ—Å–æ–≤–æ–µ** üó£Ô∏è (ogg/opus).", reply_markup=audio_reply_kb())

@router.message(F.text == "üé¨/‚≠ï –í–∏–¥–µ–æ/–ö—Ä—É–∂–æ–∫ ‚Üí üó£Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ")
async def on_text_media_to_voice(message: Message, state: FSMContext):
    await state.update_data(action="media_to_voice")
    await message.answer("–ü—Ä–∏—à–ª–∏ **–≤–∏–¥–µ–æ** üé¨ –∏–ª–∏ **–∫—Ä—É–∂–æ–∫** ‚≠ï ‚Äî —Å–¥–µ–ª–∞—é **–≥–æ–ª–æ—Å–æ–≤–æ–µ** üó£Ô∏è.", reply_markup=audio_reply_kb())

# --- Content handlers (process according to action) ---


@router.message(F.video | F.video_note | F.voice | F.audio, Flow.waiting_input)
async def process_media(message: Message, state: FSMContext):
    data = await state.get_data()
    action = data.get("action")
    if not action:
        return

    async def action_loop(act: ChatAction):
        task = asyncio.create_task(_send_action_periodically(message.chat.id, act))
        return task

    try:
        # VIDEO -> CIRCLE (video note)
        if action == "video_to_circle" and message.video:
            act = await action_loop(ChatAction.RECORD_VIDEO_NOTE)
            try:
                src = await tg_download_to_temp(message.video.file_id, ".mp4")
                dst = await ff_video_to_circle(src)
            finally:
                act.cancel()
            await bot.send_chat_action(message.chat.id, action=ChatAction.UPLOAD_VIDEO_NOTE)
            await message.answer_video_note(FSInputFile(dst))
            await message.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ")
            return

        # CIRCLE -> VIDEO
        if action == "circle_to_video" and message.video_note:
            act = await action_loop(ChatAction.RECORD_VIDEO)
            try:
                src = await tg_download_to_temp(message.video_note.file_id, ".mp4")
                dst = await ff_circle_to_video(src)
            finally:
                act.cancel()
            await bot.send_chat_action(message.chat.id, action=ChatAction.UPLOAD_VIDEO)
            await message.answer_video(FSInputFile(dst))
            await message.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ")
            return

        # AUDIO FROM VIDEO
        if action == "audio_from_video" and message.video:
            act = await action_loop(ChatAction.RECORD_VOICE)
            try:
                src = await tg_download_to_temp(message.video.file_id, ".mp4")
                dst = await ff_extract_audio(src)
            finally:
                act.cancel()
            await bot.send_chat_action(message.chat.id, action=ChatAction.UPLOAD_DOCUMENT)
            await message.answer_audio(FSInputFile(dst))
            await message.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ")
            return

        # AUDIO FROM CIRCLE
        if action == "audio_from_circle" and message.video_note:
            act = await action_loop(ChatAction.RECORD_VOICE)
            try:
                src = await tg_download_to_temp(message.video_note.file_id, ".mp4")
                dst = await ff_extract_audio(src)
            finally:
                act.cancel()
            await bot.send_chat_action(message.chat.id, action=ChatAction.UPLOAD_DOCUMENT)
            await message.answer_audio(FSInputFile(dst))
            await message.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ")
            return

        # AUDIO FROM VOICE
        if action == "audio_from_voice" and message.voice:
            act = await action_loop(ChatAction.RECORD_VOICE)
            try:
                src = await tg_download_to_temp(message.voice.file_id, ".ogg")
                dst = await ff_to_mp3(src)
            finally:
                act.cancel()
            await bot.send_chat_action(message.chat.id, action=ChatAction.UPLOAD_DOCUMENT)
            await message.answer_audio(FSInputFile(dst))
            await message.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ")
            return

        # AUDIOFILE -> VOICE
        if action == "audio_to_voice" and message.audio:
            act = await action_loop(ChatAction.RECORD_VOICE)
            try:
                file_id = message.audio.file_id
                suffix = ".mp3" if (message.audio.file_name or "").endswith(".mp3") else ".ogg"
                src = await tg_download_to_temp(file_id, suffix)
                dst = await ff_to_voice(src)
            finally:
                act.cancel()
            await bot.send_chat_action(message.chat.id, action=ChatAction.UPLOAD_VOICE)
            await message.answer_voice(FSInputFile(dst))
            await message.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ")
            return

        # VIDEO/CIRCLE -> VOICE
        if action == "media_to_voice" and (message.video or message.video_note):
            act = await action_loop(ChatAction.RECORD_VOICE)
            try:
                if message.video:
                    file_id, suffix = message.video.file_id, ".mp4"
                else:
                    file_id, suffix = message.video_note.file_id, ".mp4"
                src = await tg_download_to_temp(file_id, suffix)
                tmp_audio = await ff_extract_audio(src)
                dst = await ff_to_voice(tmp_audio)
            finally:
                act.cancel()
            await bot.send_chat_action(message.chat.id, action=ChatAction.UPLOAD_VOICE)
            await message.answer_voice(FSInputFile(dst))
            await message.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ")
            return

        # Fallback if wrong type
        await message.answer("–≠—Ç–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ üôå")

    except HTTPException as e:
        await message.answer(f"‚ö†Ô∏è {e.detail}")
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞.")
        print("ERROR:", repr(e))

# ---- FastAPI part ----


@app.get("/", response_class=PlainTextResponse)
@app.head("/", response_class=PlainTextResponse)
async def health():
    return "ok"

@app.post("/")
async def webhook(request: Request):
    # Secret-token protection (optional)
    if SECRET_TOKEN:
        rtoken = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
        if rtoken != SECRET_TOKEN:
            raise HTTPException(status_code=403, detail="Bad secret token")

    data = await request.json()
    # Parse dict -> Update object
    update = Update.model_validate(data)

    # Feed to aiogram
    await dp.feed_update(bot, update)
    return Response(status_code=200)

# ---- Startup: set webhook ----

@app.on_event("startup")
async def on_startup():
    if WEBHOOK_URL:
        await bot.set_webhook(url=WEBHOOK_URL, secret_token=(SECRET_TOKEN or None))
    else:
        print("WARNING: WEBHOOK_URL is not set; Telegram won't reach this app.")

@app.on_event("shutdown")
async def on_shutdown():
    await bot.session.close()